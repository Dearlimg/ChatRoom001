// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAccountByUserIDStmt, err = db.PrepareContext(ctx, countAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query CountAccountByUserID: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createApplicationStmt, err = db.PrepareContext(ctx, createApplication); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApplication: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createFriendRelationStmt, err = db.PrepareContext(ctx, createFriendRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFriendRelation: %w", err)
	}
	if q.createGetStmt, err = db.PrepareContext(ctx, createGet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGet: %w", err)
	}
	if q.createGroupNotifyStmt, err = db.PrepareContext(ctx, createGroupNotify); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupNotify: %w", err)
	}
	if q.createGroupNotifyReturnStmt, err = db.PrepareContext(ctx, createGroupNotifyReturn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupNotifyReturn: %w", err)
	}
	if q.createGroupRelationStmt, err = db.PrepareContext(ctx, createGroupRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupRelation: %w", err)
	}
	if q.createGroupRelationReturnStmt, err = db.PrepareContext(ctx, createGroupRelationReturn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupRelationReturn: %w", err)
	}
	if q.createManySettingStmt, err = db.PrepareContext(ctx, createManySetting); err != nil {
		return nil, fmt.Errorf("error preparing query CreateManySetting: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createMessageReturnStmt, err = db.PrepareContext(ctx, createMessageReturn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessageReturn: %w", err)
	}
	if q.createRelationReturnStmt, err = db.PrepareContext(ctx, createRelationReturn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRelationReturn: %w", err)
	}
	if q.createSettingStmt, err = db.PrepareContext(ctx, createSetting); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSetting: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteAccountByUserIDStmt, err = db.PrepareContext(ctx, deleteAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccountByUserID: %w", err)
	}
	if q.deleteApplicationStmt, err = db.PrepareContext(ctx, deleteApplication); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApplication: %w", err)
	}
	if q.deleteFileByIDStmt, err = db.PrepareContext(ctx, deleteFileByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFileByID: %w", err)
	}
	if q.deleteFriendRelationStmt, err = db.PrepareContext(ctx, deleteFriendRelation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFriendRelation: %w", err)
	}
	if q.deleteFriendRelationByAccountIDStmt, err = db.PrepareContext(ctx, deleteFriendRelationByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFriendRelationByAccountID: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, deleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deleteGroupNotifyStmt, err = db.PrepareContext(ctx, deleteGroupNotify); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupNotify: %w", err)
	}
	if q.deleteRelationStmt, err = db.PrepareContext(ctx, deleteRelation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRelation: %w", err)
	}
	if q.deleteSettingStmt, err = db.PrepareContext(ctx, deleteSetting); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSetting: %w", err)
	}
	if q.deleteSettingsByAccountIDStmt, err = db.PrepareContext(ctx, deleteSettingsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSettingsByAccountID: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.existAccountByIDStmt, err = db.PrepareContext(ctx, existAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistAccountByID: %w", err)
	}
	if q.existEmailStmt, err = db.PrepareContext(ctx, existEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistEmail: %w", err)
	}
	if q.existGroupLeaderByAccountIDWithLockStmt, err = db.PrepareContext(ctx, existGroupLeaderByAccountIDWithLock); err != nil {
		return nil, fmt.Errorf("error preparing query ExistGroupLeaderByAccountIDWithLock: %w", err)
	}
	if q.existsAccountByNameAndUserIDStmt, err = db.PrepareContext(ctx, existsAccountByNameAndUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsAccountByNameAndUserID: %w", err)
	}
	if q.existsApplicationByIDWithLockStmt, err = db.PrepareContext(ctx, existsApplicationByIDWithLock); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsApplicationByIDWithLock: %w", err)
	}
	if q.existsFriendRelationStmt, err = db.PrepareContext(ctx, existsFriendRelation); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsFriendRelation: %w", err)
	}
	if q.existsFriendSettingStmt, err = db.PrepareContext(ctx, existsFriendSetting); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsFriendSetting: %w", err)
	}
	if q.existsIsLeaderStmt, err = db.PrepareContext(ctx, existsIsLeader); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsIsLeader: %w", err)
	}
	if q.existsSettingStmt, err = db.PrepareContext(ctx, existsSetting); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsSetting: %w", err)
	}
	if q.existsUserByIDStmt, err = db.PrepareContext(ctx, existsUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByID: %w", err)
	}
	if q.getAccountByIDStmt, err = db.PrepareContext(ctx, getAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByID: %w", err)
	}
	if q.getAccountByUserIDStmt, err = db.PrepareContext(ctx, getAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByUserID: %w", err)
	}
	if q.getAccountIDsByRelationIDStmt, err = db.PrepareContext(ctx, getAccountIDsByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountIDsByRelationID: %w", err)
	}
	if q.getAccountNameByIDStmt, err = db.PrepareContext(ctx, getAccountNameByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountNameByID: %w", err)
	}
	if q.getAccountsByNameStmt, err = db.PrepareContext(ctx, getAccountsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByName: %w", err)
	}
	if q.getAcountIDsByUserIDStmt, err = db.PrepareContext(ctx, getAcountIDsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAcountIDsByUserID: %w", err)
	}
	if q.getAllEmailStmt, err = db.PrepareContext(ctx, getAllEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllEmail: %w", err)
	}
	if q.getAllGroupRelationStmt, err = db.PrepareContext(ctx, getAllGroupRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllGroupRelation: %w", err)
	}
	if q.getAllRelationIDsStmt, err = db.PrepareContext(ctx, getAllRelationIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRelationIDs: %w", err)
	}
	if q.getAllRelationOnRelationStmt, err = db.PrepareContext(ctx, getAllRelationOnRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRelationOnRelation: %w", err)
	}
	if q.getApplicationByIDStmt, err = db.PrepareContext(ctx, getApplicationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplicationByID: %w", err)
	}
	if q.getApplicationsStmt, err = db.PrepareContext(ctx, getApplications); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplications: %w", err)
	}
	if q.getCreateFileStmt, err = db.PrepareContext(ctx, getCreateFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreateFile: %w", err)
	}
	if q.getFileByRelationStmt, err = db.PrepareContext(ctx, getFileByRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByRelation: %w", err)
	}
	if q.getFileByRelationIDStmt, err = db.PrepareContext(ctx, getFileByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByRelationID: %w", err)
	}
	if q.getFileDetailsByIDStmt, err = db.PrepareContext(ctx, getFileDetailsByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileDetailsByID: %w", err)
	}
	if q.getFileKeyByIDStmt, err = db.PrepareContext(ctx, getFileKeyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileKeyByID: %w", err)
	}
	if q.getFriendPinSettingsOrderByPinTimeStmt, err = db.PrepareContext(ctx, getFriendPinSettingsOrderByPinTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendPinSettingsOrderByPinTime: %w", err)
	}
	if q.getFriendRelationByIDStmt, err = db.PrepareContext(ctx, getFriendRelationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendRelationByID: %w", err)
	}
	if q.getFriendSettingsByNameStmt, err = db.PrepareContext(ctx, getFriendSettingsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendSettingsByName: %w", err)
	}
	if q.getFriendSettingsOrderByNameStmt, err = db.PrepareContext(ctx, getFriendSettingsOrderByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendSettingsOrderByName: %w", err)
	}
	if q.getFriendShowSettingsOrderByShowTimeStmt, err = db.PrepareContext(ctx, getFriendShowSettingsOrderByShowTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendShowSettingsOrderByShowTime: %w", err)
	}
	if q.getGroupAvatarStmt, err = db.PrepareContext(ctx, getGroupAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupAvatar: %w", err)
	}
	if q.getGroupListStmt, err = db.PrepareContext(ctx, getGroupList); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupList: %w", err)
	}
	if q.getGroupMembersStmt, err = db.PrepareContext(ctx, getGroupMembers); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupMembers: %w", err)
	}
	if q.getGroupMembersByIDStmt, err = db.PrepareContext(ctx, getGroupMembersByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupMembersByID: %w", err)
	}
	if q.getGroupNotifyByIDStmt, err = db.PrepareContext(ctx, getGroupNotifyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupNotifyByID: %w", err)
	}
	if q.getGroupPinSettingsOrderByPinTimeStmt, err = db.PrepareContext(ctx, getGroupPinSettingsOrderByPinTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPinSettingsOrderByPinTime: %w", err)
	}
	if q.getGroupRelationByIDStmt, err = db.PrepareContext(ctx, getGroupRelationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupRelationByID: %w", err)
	}
	if q.getGroupSettingsByNameStmt, err = db.PrepareContext(ctx, getGroupSettingsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupSettingsByName: %w", err)
	}
	if q.getGroupShowSettingsOrderByShowTimeStmt, err = db.PrepareContext(ctx, getGroupShowSettingsOrderByShowTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupShowSettingsOrderByShowTime: %w", err)
	}
	if q.getLastMessageByRelationStmt, err = db.PrepareContext(ctx, getLastMessageByRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastMessageByRelation: %w", err)
	}
	if q.getMessageByIDStmt, err = db.PrepareContext(ctx, getMessageByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageByID: %w", err)
	}
	if q.getMsgByRelationIDAndTimeStmt, err = db.PrepareContext(ctx, getMsgByRelationIDAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgByRelationIDAndTime: %w", err)
	}
	if q.getMsgsByContentStmt, err = db.PrepareContext(ctx, getMsgsByContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByContent: %w", err)
	}
	if q.getMsgsByContentAndRelationStmt, err = db.PrepareContext(ctx, getMsgsByContentAndRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByContentAndRelation: %w", err)
	}
	if q.getPinMsgsByRelationIDStmt, err = db.PrepareContext(ctx, getPinMsgsByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPinMsgsByRelationID: %w", err)
	}
	if q.getRelationIDByAccountIDStmt, err = db.PrepareContext(ctx, getRelationIDByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationIDByAccountID: %w", err)
	}
	if q.getRelationIDByAccountIDFromSettingsStmt, err = db.PrepareContext(ctx, getRelationIDByAccountIDFromSettings); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationIDByAccountIDFromSettings: %w", err)
	}
	if q.getRelationIDByInfoStmt, err = db.PrepareContext(ctx, getRelationIDByInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationIDByInfo: %w", err)
	}
	if q.getRlyMsgsInfoByMsgIDStmt, err = db.PrepareContext(ctx, getRlyMsgsInfoByMsgID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRlyMsgsInfoByMsgID: %w", err)
	}
	if q.getSettingByIDStmt, err = db.PrepareContext(ctx, getSettingByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSettingByID: %w", err)
	}
	if q.getTopMsgByRelationIDStmt, err = db.PrepareContext(ctx, getTopMsgByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopMsgByRelationID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.offerMsgsByAccountIDAndTimeStmt, err = db.PrepareContext(ctx, offerMsgsByAccountIDAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query OfferMsgsByAccountIDAndTime: %w", err)
	}
	if q.transferIsLeaderFalseStmt, err = db.PrepareContext(ctx, transferIsLeaderFalse); err != nil {
		return nil, fmt.Errorf("error preparing query TransferIsLeaderFalse: %w", err)
	}
	if q.transferIsLeaderTrueStmt, err = db.PrepareContext(ctx, transferIsLeaderTrue); err != nil {
		return nil, fmt.Errorf("error preparing query TransferIsLeaderTrue: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateAccountAvatarStmt, err = db.PrepareContext(ctx, updateAccountAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountAvatar: %w", err)
	}
	if q.updateApplicationStmt, err = db.PrepareContext(ctx, updateApplication); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApplication: %w", err)
	}
	if q.updateGroupAvatarStmt, err = db.PrepareContext(ctx, updateGroupAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupAvatar: %w", err)
	}
	if q.updateGroupNotifyStmt, err = db.PrepareContext(ctx, updateGroupNotify); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupNotify: %w", err)
	}
	if q.updateGroupNotifyReturnStmt, err = db.PrepareContext(ctx, updateGroupNotifyReturn); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupNotifyReturn: %w", err)
	}
	if q.updateGroupRelationStmt, err = db.PrepareContext(ctx, updateGroupRelation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupRelation: %w", err)
	}
	if q.updateMsgPinStmt, err = db.PrepareContext(ctx, updateMsgPin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgPin: %w", err)
	}
	if q.updateMsgReadsStmt, err = db.PrepareContext(ctx, updateMsgReads); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgReads: %w", err)
	}
	if q.updateMsgReadsReturnStmt, err = db.PrepareContext(ctx, updateMsgReadsReturn); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgReadsReturn: %w", err)
	}
	if q.updateMsgRevokeStmt, err = db.PrepareContext(ctx, updateMsgRevoke); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgRevoke: %w", err)
	}
	if q.updateMsgTopStmt, err = db.PrepareContext(ctx, updateMsgTop); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgTop: %w", err)
	}
	if q.updateSettingDisturbStmt, err = db.PrepareContext(ctx, updateSettingDisturb); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingDisturb: %w", err)
	}
	if q.updateSettingNickNameStmt, err = db.PrepareContext(ctx, updateSettingNickName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingNickName: %w", err)
	}
	if q.updateSettingPinStmt, err = db.PrepareContext(ctx, updateSettingPin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingPin: %w", err)
	}
	if q.updateSettingShowStmt, err = db.PrepareContext(ctx, updateSettingShow); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingShow: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAccountByUserIDStmt != nil {
		if cerr := q.countAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createApplicationStmt != nil {
		if cerr := q.createApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createApplicationStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createFriendRelationStmt != nil {
		if cerr := q.createFriendRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFriendRelationStmt: %w", cerr)
		}
	}
	if q.createGetStmt != nil {
		if cerr := q.createGetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGetStmt: %w", cerr)
		}
	}
	if q.createGroupNotifyStmt != nil {
		if cerr := q.createGroupNotifyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupNotifyStmt: %w", cerr)
		}
	}
	if q.createGroupNotifyReturnStmt != nil {
		if cerr := q.createGroupNotifyReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupNotifyReturnStmt: %w", cerr)
		}
	}
	if q.createGroupRelationStmt != nil {
		if cerr := q.createGroupRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupRelationStmt: %w", cerr)
		}
	}
	if q.createGroupRelationReturnStmt != nil {
		if cerr := q.createGroupRelationReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupRelationReturnStmt: %w", cerr)
		}
	}
	if q.createManySettingStmt != nil {
		if cerr := q.createManySettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createManySettingStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createMessageReturnStmt != nil {
		if cerr := q.createMessageReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageReturnStmt: %w", cerr)
		}
	}
	if q.createRelationReturnStmt != nil {
		if cerr := q.createRelationReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRelationReturnStmt: %w", cerr)
		}
	}
	if q.createSettingStmt != nil {
		if cerr := q.createSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSettingStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteAccountByUserIDStmt != nil {
		if cerr := q.deleteAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteApplicationStmt != nil {
		if cerr := q.deleteApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteApplicationStmt: %w", cerr)
		}
	}
	if q.deleteFileByIDStmt != nil {
		if cerr := q.deleteFileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileByIDStmt: %w", cerr)
		}
	}
	if q.deleteFriendRelationStmt != nil {
		if cerr := q.deleteFriendRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFriendRelationStmt: %w", cerr)
		}
	}
	if q.deleteFriendRelationByAccountIDStmt != nil {
		if cerr := q.deleteFriendRelationByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFriendRelationByAccountIDStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deleteGroupNotifyStmt != nil {
		if cerr := q.deleteGroupNotifyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupNotifyStmt: %w", cerr)
		}
	}
	if q.deleteRelationStmt != nil {
		if cerr := q.deleteRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRelationStmt: %w", cerr)
		}
	}
	if q.deleteSettingStmt != nil {
		if cerr := q.deleteSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSettingStmt: %w", cerr)
		}
	}
	if q.deleteSettingsByAccountIDStmt != nil {
		if cerr := q.deleteSettingsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSettingsByAccountIDStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.existAccountByIDStmt != nil {
		if cerr := q.existAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existAccountByIDStmt: %w", cerr)
		}
	}
	if q.existEmailStmt != nil {
		if cerr := q.existEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existEmailStmt: %w", cerr)
		}
	}
	if q.existGroupLeaderByAccountIDWithLockStmt != nil {
		if cerr := q.existGroupLeaderByAccountIDWithLockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existGroupLeaderByAccountIDWithLockStmt: %w", cerr)
		}
	}
	if q.existsAccountByNameAndUserIDStmt != nil {
		if cerr := q.existsAccountByNameAndUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsAccountByNameAndUserIDStmt: %w", cerr)
		}
	}
	if q.existsApplicationByIDWithLockStmt != nil {
		if cerr := q.existsApplicationByIDWithLockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsApplicationByIDWithLockStmt: %w", cerr)
		}
	}
	if q.existsFriendRelationStmt != nil {
		if cerr := q.existsFriendRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsFriendRelationStmt: %w", cerr)
		}
	}
	if q.existsFriendSettingStmt != nil {
		if cerr := q.existsFriendSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsFriendSettingStmt: %w", cerr)
		}
	}
	if q.existsIsLeaderStmt != nil {
		if cerr := q.existsIsLeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsIsLeaderStmt: %w", cerr)
		}
	}
	if q.existsSettingStmt != nil {
		if cerr := q.existsSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsSettingStmt: %w", cerr)
		}
	}
	if q.existsUserByIDStmt != nil {
		if cerr := q.existsUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByIDStmt: %w", cerr)
		}
	}
	if q.getAccountByIDStmt != nil {
		if cerr := q.getAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIDStmt: %w", cerr)
		}
	}
	if q.getAccountByUserIDStmt != nil {
		if cerr := q.getAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.getAccountIDsByRelationIDStmt != nil {
		if cerr := q.getAccountIDsByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountIDsByRelationIDStmt: %w", cerr)
		}
	}
	if q.getAccountNameByIDStmt != nil {
		if cerr := q.getAccountNameByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountNameByIDStmt: %w", cerr)
		}
	}
	if q.getAccountsByNameStmt != nil {
		if cerr := q.getAccountsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByNameStmt: %w", cerr)
		}
	}
	if q.getAcountIDsByUserIDStmt != nil {
		if cerr := q.getAcountIDsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAcountIDsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAllEmailStmt != nil {
		if cerr := q.getAllEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllEmailStmt: %w", cerr)
		}
	}
	if q.getAllGroupRelationStmt != nil {
		if cerr := q.getAllGroupRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllGroupRelationStmt: %w", cerr)
		}
	}
	if q.getAllRelationIDsStmt != nil {
		if cerr := q.getAllRelationIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRelationIDsStmt: %w", cerr)
		}
	}
	if q.getAllRelationOnRelationStmt != nil {
		if cerr := q.getAllRelationOnRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRelationOnRelationStmt: %w", cerr)
		}
	}
	if q.getApplicationByIDStmt != nil {
		if cerr := q.getApplicationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationByIDStmt: %w", cerr)
		}
	}
	if q.getApplicationsStmt != nil {
		if cerr := q.getApplicationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationsStmt: %w", cerr)
		}
	}
	if q.getCreateFileStmt != nil {
		if cerr := q.getCreateFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreateFileStmt: %w", cerr)
		}
	}
	if q.getFileByRelationStmt != nil {
		if cerr := q.getFileByRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByRelationStmt: %w", cerr)
		}
	}
	if q.getFileByRelationIDStmt != nil {
		if cerr := q.getFileByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByRelationIDStmt: %w", cerr)
		}
	}
	if q.getFileDetailsByIDStmt != nil {
		if cerr := q.getFileDetailsByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileDetailsByIDStmt: %w", cerr)
		}
	}
	if q.getFileKeyByIDStmt != nil {
		if cerr := q.getFileKeyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileKeyByIDStmt: %w", cerr)
		}
	}
	if q.getFriendPinSettingsOrderByPinTimeStmt != nil {
		if cerr := q.getFriendPinSettingsOrderByPinTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendPinSettingsOrderByPinTimeStmt: %w", cerr)
		}
	}
	if q.getFriendRelationByIDStmt != nil {
		if cerr := q.getFriendRelationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendRelationByIDStmt: %w", cerr)
		}
	}
	if q.getFriendSettingsByNameStmt != nil {
		if cerr := q.getFriendSettingsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendSettingsByNameStmt: %w", cerr)
		}
	}
	if q.getFriendSettingsOrderByNameStmt != nil {
		if cerr := q.getFriendSettingsOrderByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendSettingsOrderByNameStmt: %w", cerr)
		}
	}
	if q.getFriendShowSettingsOrderByShowTimeStmt != nil {
		if cerr := q.getFriendShowSettingsOrderByShowTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendShowSettingsOrderByShowTimeStmt: %w", cerr)
		}
	}
	if q.getGroupAvatarStmt != nil {
		if cerr := q.getGroupAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupAvatarStmt: %w", cerr)
		}
	}
	if q.getGroupListStmt != nil {
		if cerr := q.getGroupListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupListStmt: %w", cerr)
		}
	}
	if q.getGroupMembersStmt != nil {
		if cerr := q.getGroupMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupMembersStmt: %w", cerr)
		}
	}
	if q.getGroupMembersByIDStmt != nil {
		if cerr := q.getGroupMembersByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupMembersByIDStmt: %w", cerr)
		}
	}
	if q.getGroupNotifyByIDStmt != nil {
		if cerr := q.getGroupNotifyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupNotifyByIDStmt: %w", cerr)
		}
	}
	if q.getGroupPinSettingsOrderByPinTimeStmt != nil {
		if cerr := q.getGroupPinSettingsOrderByPinTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPinSettingsOrderByPinTimeStmt: %w", cerr)
		}
	}
	if q.getGroupRelationByIDStmt != nil {
		if cerr := q.getGroupRelationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupRelationByIDStmt: %w", cerr)
		}
	}
	if q.getGroupSettingsByNameStmt != nil {
		if cerr := q.getGroupSettingsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupSettingsByNameStmt: %w", cerr)
		}
	}
	if q.getGroupShowSettingsOrderByShowTimeStmt != nil {
		if cerr := q.getGroupShowSettingsOrderByShowTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupShowSettingsOrderByShowTimeStmt: %w", cerr)
		}
	}
	if q.getLastMessageByRelationStmt != nil {
		if cerr := q.getLastMessageByRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastMessageByRelationStmt: %w", cerr)
		}
	}
	if q.getMessageByIDStmt != nil {
		if cerr := q.getMessageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageByIDStmt: %w", cerr)
		}
	}
	if q.getMsgByRelationIDAndTimeStmt != nil {
		if cerr := q.getMsgByRelationIDAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgByRelationIDAndTimeStmt: %w", cerr)
		}
	}
	if q.getMsgsByContentStmt != nil {
		if cerr := q.getMsgsByContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByContentStmt: %w", cerr)
		}
	}
	if q.getMsgsByContentAndRelationStmt != nil {
		if cerr := q.getMsgsByContentAndRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByContentAndRelationStmt: %w", cerr)
		}
	}
	if q.getPinMsgsByRelationIDStmt != nil {
		if cerr := q.getPinMsgsByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPinMsgsByRelationIDStmt: %w", cerr)
		}
	}
	if q.getRelationIDByAccountIDStmt != nil {
		if cerr := q.getRelationIDByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationIDByAccountIDStmt: %w", cerr)
		}
	}
	if q.getRelationIDByAccountIDFromSettingsStmt != nil {
		if cerr := q.getRelationIDByAccountIDFromSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationIDByAccountIDFromSettingsStmt: %w", cerr)
		}
	}
	if q.getRelationIDByInfoStmt != nil {
		if cerr := q.getRelationIDByInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationIDByInfoStmt: %w", cerr)
		}
	}
	if q.getRlyMsgsInfoByMsgIDStmt != nil {
		if cerr := q.getRlyMsgsInfoByMsgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRlyMsgsInfoByMsgIDStmt: %w", cerr)
		}
	}
	if q.getSettingByIDStmt != nil {
		if cerr := q.getSettingByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSettingByIDStmt: %w", cerr)
		}
	}
	if q.getTopMsgByRelationIDStmt != nil {
		if cerr := q.getTopMsgByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopMsgByRelationIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.offerMsgsByAccountIDAndTimeStmt != nil {
		if cerr := q.offerMsgsByAccountIDAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing offerMsgsByAccountIDAndTimeStmt: %w", cerr)
		}
	}
	if q.transferIsLeaderFalseStmt != nil {
		if cerr := q.transferIsLeaderFalseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transferIsLeaderFalseStmt: %w", cerr)
		}
	}
	if q.transferIsLeaderTrueStmt != nil {
		if cerr := q.transferIsLeaderTrueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transferIsLeaderTrueStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateAccountAvatarStmt != nil {
		if cerr := q.updateAccountAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountAvatarStmt: %w", cerr)
		}
	}
	if q.updateApplicationStmt != nil {
		if cerr := q.updateApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateApplicationStmt: %w", cerr)
		}
	}
	if q.updateGroupAvatarStmt != nil {
		if cerr := q.updateGroupAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupAvatarStmt: %w", cerr)
		}
	}
	if q.updateGroupNotifyStmt != nil {
		if cerr := q.updateGroupNotifyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupNotifyStmt: %w", cerr)
		}
	}
	if q.updateGroupNotifyReturnStmt != nil {
		if cerr := q.updateGroupNotifyReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupNotifyReturnStmt: %w", cerr)
		}
	}
	if q.updateGroupRelationStmt != nil {
		if cerr := q.updateGroupRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupRelationStmt: %w", cerr)
		}
	}
	if q.updateMsgPinStmt != nil {
		if cerr := q.updateMsgPinStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgPinStmt: %w", cerr)
		}
	}
	if q.updateMsgReadsStmt != nil {
		if cerr := q.updateMsgReadsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgReadsStmt: %w", cerr)
		}
	}
	if q.updateMsgReadsReturnStmt != nil {
		if cerr := q.updateMsgReadsReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgReadsReturnStmt: %w", cerr)
		}
	}
	if q.updateMsgRevokeStmt != nil {
		if cerr := q.updateMsgRevokeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgRevokeStmt: %w", cerr)
		}
	}
	if q.updateMsgTopStmt != nil {
		if cerr := q.updateMsgTopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgTopStmt: %w", cerr)
		}
	}
	if q.updateSettingDisturbStmt != nil {
		if cerr := q.updateSettingDisturbStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingDisturbStmt: %w", cerr)
		}
	}
	if q.updateSettingNickNameStmt != nil {
		if cerr := q.updateSettingNickNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingNickNameStmt: %w", cerr)
		}
	}
	if q.updateSettingPinStmt != nil {
		if cerr := q.updateSettingPinStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingPinStmt: %w", cerr)
		}
	}
	if q.updateSettingShowStmt != nil {
		if cerr := q.updateSettingShowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingShowStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	countAccountByUserIDStmt                 *sql.Stmt
	createAccountStmt                        *sql.Stmt
	createApplicationStmt                    *sql.Stmt
	createFileStmt                           *sql.Stmt
	createFriendRelationStmt                 *sql.Stmt
	createGetStmt                            *sql.Stmt
	createGroupNotifyStmt                    *sql.Stmt
	createGroupNotifyReturnStmt              *sql.Stmt
	createGroupRelationStmt                  *sql.Stmt
	createGroupRelationReturnStmt            *sql.Stmt
	createManySettingStmt                    *sql.Stmt
	createMessageStmt                        *sql.Stmt
	createMessageReturnStmt                  *sql.Stmt
	createRelationReturnStmt                 *sql.Stmt
	createSettingStmt                        *sql.Stmt
	createUserStmt                           *sql.Stmt
	deleteAccountStmt                        *sql.Stmt
	deleteAccountByUserIDStmt                *sql.Stmt
	deleteApplicationStmt                    *sql.Stmt
	deleteFileByIDStmt                       *sql.Stmt
	deleteFriendRelationStmt                 *sql.Stmt
	deleteFriendRelationByAccountIDStmt      *sql.Stmt
	deleteGroupStmt                          *sql.Stmt
	deleteGroupNotifyStmt                    *sql.Stmt
	deleteRelationStmt                       *sql.Stmt
	deleteSettingStmt                        *sql.Stmt
	deleteSettingsByAccountIDStmt            *sql.Stmt
	deleteUserStmt                           *sql.Stmt
	existAccountByIDStmt                     *sql.Stmt
	existEmailStmt                           *sql.Stmt
	existGroupLeaderByAccountIDWithLockStmt  *sql.Stmt
	existsAccountByNameAndUserIDStmt         *sql.Stmt
	existsApplicationByIDWithLockStmt        *sql.Stmt
	existsFriendRelationStmt                 *sql.Stmt
	existsFriendSettingStmt                  *sql.Stmt
	existsIsLeaderStmt                       *sql.Stmt
	existsSettingStmt                        *sql.Stmt
	existsUserByIDStmt                       *sql.Stmt
	getAccountByIDStmt                       *sql.Stmt
	getAccountByUserIDStmt                   *sql.Stmt
	getAccountIDsByRelationIDStmt            *sql.Stmt
	getAccountNameByIDStmt                   *sql.Stmt
	getAccountsByNameStmt                    *sql.Stmt
	getAcountIDsByUserIDStmt                 *sql.Stmt
	getAllEmailStmt                          *sql.Stmt
	getAllGroupRelationStmt                  *sql.Stmt
	getAllRelationIDsStmt                    *sql.Stmt
	getAllRelationOnRelationStmt             *sql.Stmt
	getApplicationByIDStmt                   *sql.Stmt
	getApplicationsStmt                      *sql.Stmt
	getCreateFileStmt                        *sql.Stmt
	getFileByRelationStmt                    *sql.Stmt
	getFileByRelationIDStmt                  *sql.Stmt
	getFileDetailsByIDStmt                   *sql.Stmt
	getFileKeyByIDStmt                       *sql.Stmt
	getFriendPinSettingsOrderByPinTimeStmt   *sql.Stmt
	getFriendRelationByIDStmt                *sql.Stmt
	getFriendSettingsByNameStmt              *sql.Stmt
	getFriendSettingsOrderByNameStmt         *sql.Stmt
	getFriendShowSettingsOrderByShowTimeStmt *sql.Stmt
	getGroupAvatarStmt                       *sql.Stmt
	getGroupListStmt                         *sql.Stmt
	getGroupMembersStmt                      *sql.Stmt
	getGroupMembersByIDStmt                  *sql.Stmt
	getGroupNotifyByIDStmt                   *sql.Stmt
	getGroupPinSettingsOrderByPinTimeStmt    *sql.Stmt
	getGroupRelationByIDStmt                 *sql.Stmt
	getGroupSettingsByNameStmt               *sql.Stmt
	getGroupShowSettingsOrderByShowTimeStmt  *sql.Stmt
	getLastMessageByRelationStmt             *sql.Stmt
	getMessageByIDStmt                       *sql.Stmt
	getMsgByRelationIDAndTimeStmt            *sql.Stmt
	getMsgsByContentStmt                     *sql.Stmt
	getMsgsByContentAndRelationStmt          *sql.Stmt
	getPinMsgsByRelationIDStmt               *sql.Stmt
	getRelationIDByAccountIDStmt             *sql.Stmt
	getRelationIDByAccountIDFromSettingsStmt *sql.Stmt
	getRelationIDByInfoStmt                  *sql.Stmt
	getRlyMsgsInfoByMsgIDStmt                *sql.Stmt
	getSettingByIDStmt                       *sql.Stmt
	getTopMsgByRelationIDStmt                *sql.Stmt
	getUserByEmailStmt                       *sql.Stmt
	getUserByIDStmt                          *sql.Stmt
	offerMsgsByAccountIDAndTimeStmt          *sql.Stmt
	transferIsLeaderFalseStmt                *sql.Stmt
	transferIsLeaderTrueStmt                 *sql.Stmt
	updateAccountStmt                        *sql.Stmt
	updateAccountAvatarStmt                  *sql.Stmt
	updateApplicationStmt                    *sql.Stmt
	updateGroupAvatarStmt                    *sql.Stmt
	updateGroupNotifyStmt                    *sql.Stmt
	updateGroupNotifyReturnStmt              *sql.Stmt
	updateGroupRelationStmt                  *sql.Stmt
	updateMsgPinStmt                         *sql.Stmt
	updateMsgReadsStmt                       *sql.Stmt
	updateMsgReadsReturnStmt                 *sql.Stmt
	updateMsgRevokeStmt                      *sql.Stmt
	updateMsgTopStmt                         *sql.Stmt
	updateSettingDisturbStmt                 *sql.Stmt
	updateSettingNickNameStmt                *sql.Stmt
	updateSettingPinStmt                     *sql.Stmt
	updateSettingShowStmt                    *sql.Stmt
	updateUserStmt                           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		countAccountByUserIDStmt:                 q.countAccountByUserIDStmt,
		createAccountStmt:                        q.createAccountStmt,
		createApplicationStmt:                    q.createApplicationStmt,
		createFileStmt:                           q.createFileStmt,
		createFriendRelationStmt:                 q.createFriendRelationStmt,
		createGetStmt:                            q.createGetStmt,
		createGroupNotifyStmt:                    q.createGroupNotifyStmt,
		createGroupNotifyReturnStmt:              q.createGroupNotifyReturnStmt,
		createGroupRelationStmt:                  q.createGroupRelationStmt,
		createGroupRelationReturnStmt:            q.createGroupRelationReturnStmt,
		createManySettingStmt:                    q.createManySettingStmt,
		createMessageStmt:                        q.createMessageStmt,
		createMessageReturnStmt:                  q.createMessageReturnStmt,
		createRelationReturnStmt:                 q.createRelationReturnStmt,
		createSettingStmt:                        q.createSettingStmt,
		createUserStmt:                           q.createUserStmt,
		deleteAccountStmt:                        q.deleteAccountStmt,
		deleteAccountByUserIDStmt:                q.deleteAccountByUserIDStmt,
		deleteApplicationStmt:                    q.deleteApplicationStmt,
		deleteFileByIDStmt:                       q.deleteFileByIDStmt,
		deleteFriendRelationStmt:                 q.deleteFriendRelationStmt,
		deleteFriendRelationByAccountIDStmt:      q.deleteFriendRelationByAccountIDStmt,
		deleteGroupStmt:                          q.deleteGroupStmt,
		deleteGroupNotifyStmt:                    q.deleteGroupNotifyStmt,
		deleteRelationStmt:                       q.deleteRelationStmt,
		deleteSettingStmt:                        q.deleteSettingStmt,
		deleteSettingsByAccountIDStmt:            q.deleteSettingsByAccountIDStmt,
		deleteUserStmt:                           q.deleteUserStmt,
		existAccountByIDStmt:                     q.existAccountByIDStmt,
		existEmailStmt:                           q.existEmailStmt,
		existGroupLeaderByAccountIDWithLockStmt:  q.existGroupLeaderByAccountIDWithLockStmt,
		existsAccountByNameAndUserIDStmt:         q.existsAccountByNameAndUserIDStmt,
		existsApplicationByIDWithLockStmt:        q.existsApplicationByIDWithLockStmt,
		existsFriendRelationStmt:                 q.existsFriendRelationStmt,
		existsFriendSettingStmt:                  q.existsFriendSettingStmt,
		existsIsLeaderStmt:                       q.existsIsLeaderStmt,
		existsSettingStmt:                        q.existsSettingStmt,
		existsUserByIDStmt:                       q.existsUserByIDStmt,
		getAccountByIDStmt:                       q.getAccountByIDStmt,
		getAccountByUserIDStmt:                   q.getAccountByUserIDStmt,
		getAccountIDsByRelationIDStmt:            q.getAccountIDsByRelationIDStmt,
		getAccountNameByIDStmt:                   q.getAccountNameByIDStmt,
		getAccountsByNameStmt:                    q.getAccountsByNameStmt,
		getAcountIDsByUserIDStmt:                 q.getAcountIDsByUserIDStmt,
		getAllEmailStmt:                          q.getAllEmailStmt,
		getAllGroupRelationStmt:                  q.getAllGroupRelationStmt,
		getAllRelationIDsStmt:                    q.getAllRelationIDsStmt,
		getAllRelationOnRelationStmt:             q.getAllRelationOnRelationStmt,
		getApplicationByIDStmt:                   q.getApplicationByIDStmt,
		getApplicationsStmt:                      q.getApplicationsStmt,
		getCreateFileStmt:                        q.getCreateFileStmt,
		getFileByRelationStmt:                    q.getFileByRelationStmt,
		getFileByRelationIDStmt:                  q.getFileByRelationIDStmt,
		getFileDetailsByIDStmt:                   q.getFileDetailsByIDStmt,
		getFileKeyByIDStmt:                       q.getFileKeyByIDStmt,
		getFriendPinSettingsOrderByPinTimeStmt:   q.getFriendPinSettingsOrderByPinTimeStmt,
		getFriendRelationByIDStmt:                q.getFriendRelationByIDStmt,
		getFriendSettingsByNameStmt:              q.getFriendSettingsByNameStmt,
		getFriendSettingsOrderByNameStmt:         q.getFriendSettingsOrderByNameStmt,
		getFriendShowSettingsOrderByShowTimeStmt: q.getFriendShowSettingsOrderByShowTimeStmt,
		getGroupAvatarStmt:                       q.getGroupAvatarStmt,
		getGroupListStmt:                         q.getGroupListStmt,
		getGroupMembersStmt:                      q.getGroupMembersStmt,
		getGroupMembersByIDStmt:                  q.getGroupMembersByIDStmt,
		getGroupNotifyByIDStmt:                   q.getGroupNotifyByIDStmt,
		getGroupPinSettingsOrderByPinTimeStmt:    q.getGroupPinSettingsOrderByPinTimeStmt,
		getGroupRelationByIDStmt:                 q.getGroupRelationByIDStmt,
		getGroupSettingsByNameStmt:               q.getGroupSettingsByNameStmt,
		getGroupShowSettingsOrderByShowTimeStmt:  q.getGroupShowSettingsOrderByShowTimeStmt,
		getLastMessageByRelationStmt:             q.getLastMessageByRelationStmt,
		getMessageByIDStmt:                       q.getMessageByIDStmt,
		getMsgByRelationIDAndTimeStmt:            q.getMsgByRelationIDAndTimeStmt,
		getMsgsByContentStmt:                     q.getMsgsByContentStmt,
		getMsgsByContentAndRelationStmt:          q.getMsgsByContentAndRelationStmt,
		getPinMsgsByRelationIDStmt:               q.getPinMsgsByRelationIDStmt,
		getRelationIDByAccountIDStmt:             q.getRelationIDByAccountIDStmt,
		getRelationIDByAccountIDFromSettingsStmt: q.getRelationIDByAccountIDFromSettingsStmt,
		getRelationIDByInfoStmt:                  q.getRelationIDByInfoStmt,
		getRlyMsgsInfoByMsgIDStmt:                q.getRlyMsgsInfoByMsgIDStmt,
		getSettingByIDStmt:                       q.getSettingByIDStmt,
		getTopMsgByRelationIDStmt:                q.getTopMsgByRelationIDStmt,
		getUserByEmailStmt:                       q.getUserByEmailStmt,
		getUserByIDStmt:                          q.getUserByIDStmt,
		offerMsgsByAccountIDAndTimeStmt:          q.offerMsgsByAccountIDAndTimeStmt,
		transferIsLeaderFalseStmt:                q.transferIsLeaderFalseStmt,
		transferIsLeaderTrueStmt:                 q.transferIsLeaderTrueStmt,
		updateAccountStmt:                        q.updateAccountStmt,
		updateAccountAvatarStmt:                  q.updateAccountAvatarStmt,
		updateApplicationStmt:                    q.updateApplicationStmt,
		updateGroupAvatarStmt:                    q.updateGroupAvatarStmt,
		updateGroupNotifyStmt:                    q.updateGroupNotifyStmt,
		updateGroupNotifyReturnStmt:              q.updateGroupNotifyReturnStmt,
		updateGroupRelationStmt:                  q.updateGroupRelationStmt,
		updateMsgPinStmt:                         q.updateMsgPinStmt,
		updateMsgReadsStmt:                       q.updateMsgReadsStmt,
		updateMsgReadsReturnStmt:                 q.updateMsgReadsReturnStmt,
		updateMsgRevokeStmt:                      q.updateMsgRevokeStmt,
		updateMsgTopStmt:                         q.updateMsgTopStmt,
		updateSettingDisturbStmt:                 q.updateSettingDisturbStmt,
		updateSettingNickNameStmt:                q.updateSettingNickNameStmt,
		updateSettingPinStmt:                     q.updateSettingPinStmt,
		updateSettingShowStmt:                    q.updateSettingShowStmt,
		updateUserStmt:                           q.updateUserStmt,
	}
}
