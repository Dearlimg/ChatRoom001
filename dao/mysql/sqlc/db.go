// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAccountByUserIDStmt, err = db.PrepareContext(ctx, countAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query CountAccountByUserID: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteAccountByUserIDStmt, err = db.PrepareContext(ctx, deleteAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccountByUserID: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.existAccountByIDStmt, err = db.PrepareContext(ctx, existAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistAccountByID: %w", err)
	}
	if q.existEmailStmt, err = db.PrepareContext(ctx, existEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistEmail: %w", err)
	}
	if q.existsUserByIDStmt, err = db.PrepareContext(ctx, existsUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByID: %w", err)
	}
	if q.getAccountByIDStmt, err = db.PrepareContext(ctx, getAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByID: %w", err)
	}
	if q.getAccountByUserIDStmt, err = db.PrepareContext(ctx, getAccountByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByUserID: %w", err)
	}
	if q.getAccountsByNameStmt, err = db.PrepareContext(ctx, getAccountsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByName: %w", err)
	}
	if q.getAcountIDsByUserIDStmt, err = db.PrepareContext(ctx, getAcountIDsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAcountIDsByUserID: %w", err)
	}
	if q.getAllEmailStmt, err = db.PrepareContext(ctx, getAllEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllEmail: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateAccountAvatarStmt, err = db.PrepareContext(ctx, updateAccountAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountAvatar: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAccountByUserIDStmt != nil {
		if cerr := q.countAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteAccountByUserIDStmt != nil {
		if cerr := q.deleteAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.existAccountByIDStmt != nil {
		if cerr := q.existAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existAccountByIDStmt: %w", cerr)
		}
	}
	if q.existEmailStmt != nil {
		if cerr := q.existEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existEmailStmt: %w", cerr)
		}
	}
	if q.existsUserByIDStmt != nil {
		if cerr := q.existsUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByIDStmt: %w", cerr)
		}
	}
	if q.getAccountByIDStmt != nil {
		if cerr := q.getAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIDStmt: %w", cerr)
		}
	}
	if q.getAccountByUserIDStmt != nil {
		if cerr := q.getAccountByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByUserIDStmt: %w", cerr)
		}
	}
	if q.getAccountsByNameStmt != nil {
		if cerr := q.getAccountsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByNameStmt: %w", cerr)
		}
	}
	if q.getAcountIDsByUserIDStmt != nil {
		if cerr := q.getAcountIDsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAcountIDsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAllEmailStmt != nil {
		if cerr := q.getAllEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllEmailStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateAccountAvatarStmt != nil {
		if cerr := q.updateAccountAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountAvatarStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	countAccountByUserIDStmt  *sql.Stmt
	createAccountStmt         *sql.Stmt
	createUserStmt            *sql.Stmt
	deleteAccountStmt         *sql.Stmt
	deleteAccountByUserIDStmt *sql.Stmt
	deleteUserStmt            *sql.Stmt
	existAccountByIDStmt      *sql.Stmt
	existEmailStmt            *sql.Stmt
	existsUserByIDStmt        *sql.Stmt
	getAccountByIDStmt        *sql.Stmt
	getAccountByUserIDStmt    *sql.Stmt
	getAccountsByNameStmt     *sql.Stmt
	getAcountIDsByUserIDStmt  *sql.Stmt
	getAllEmailStmt           *sql.Stmt
	getUserByEmailStmt        *sql.Stmt
	getUserByIDStmt           *sql.Stmt
	updateAccountStmt         *sql.Stmt
	updateAccountAvatarStmt   *sql.Stmt
	updateUserStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		countAccountByUserIDStmt:  q.countAccountByUserIDStmt,
		createAccountStmt:         q.createAccountStmt,
		createUserStmt:            q.createUserStmt,
		deleteAccountStmt:         q.deleteAccountStmt,
		deleteAccountByUserIDStmt: q.deleteAccountByUserIDStmt,
		deleteUserStmt:            q.deleteUserStmt,
		existAccountByIDStmt:      q.existAccountByIDStmt,
		existEmailStmt:            q.existEmailStmt,
		existsUserByIDStmt:        q.existsUserByIDStmt,
		getAccountByIDStmt:        q.getAccountByIDStmt,
		getAccountByUserIDStmt:    q.getAccountByUserIDStmt,
		getAccountsByNameStmt:     q.getAccountsByNameStmt,
		getAcountIDsByUserIDStmt:  q.getAcountIDsByUserIDStmt,
		getAllEmailStmt:           q.getAllEmailStmt,
		getUserByEmailStmt:        q.getUserByEmailStmt,
		getUserByIDStmt:           q.getUserByIDStmt,
		updateAccountStmt:         q.updateAccountStmt,
		updateAccountAvatarStmt:   q.updateAccountAvatarStmt,
		updateUserStmt:            q.updateUserStmt,
	}
}
