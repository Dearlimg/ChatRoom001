// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: group_notify.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createGroupNotify = `-- name: CreateGroupNotify :exec
insert into group_notify
(relation_id, msg_content, msg_expand, account_id, create_at, read_ids)
values (?,?,?,?,?,?)
`

type CreateGroupNotifyParams struct {
	RelationID sql.NullInt64
	MsgContent string
	MsgExpand  json.RawMessage
	AccountID  sql.NullInt64
	CreateAt   time.Time
	ReadIds    json.RawMessage
}

func (q *Queries) CreateGroupNotify(ctx context.Context, arg *CreateGroupNotifyParams) error {
	_, err := q.exec(ctx, q.createGroupNotifyStmt, createGroupNotify,
		arg.RelationID,
		arg.MsgContent,
		arg.MsgExpand,
		arg.AccountID,
		arg.CreateAt,
		arg.ReadIds,
	)
	return err
}

const createGroupNotifyReturn = `-- name: CreateGroupNotifyReturn :one


SELECT id, relation_id, msg_content, msg_expand, account_id, create_at, read_ids, msg_content_tsv
FROM group_notify
WHERE id = LAST_INSERT_ID()
`

// -- name: CreateGroupNotifyReturn :one
// select *
// from group_notify
// where create_at=?
// and relation_id=?
// and account_id=?;
func (q *Queries) CreateGroupNotifyReturn(ctx context.Context) (*GroupNotify, error) {
	row := q.queryRow(ctx, q.createGroupNotifyReturnStmt, createGroupNotifyReturn)
	var i GroupNotify
	err := row.Scan(
		&i.ID,
		&i.RelationID,
		&i.MsgContent,
		&i.MsgExpand,
		&i.AccountID,
		&i.CreateAt,
		&i.ReadIds,
		&i.MsgContentTsv,
	)
	return &i, err
}

const deleteGroupNotify = `-- name: DeleteGroupNotify :exec
delete
from group_notify
where id=?
`

func (q *Queries) DeleteGroupNotify(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteGroupNotifyStmt, deleteGroupNotify, id)
	return err
}

const getGroupNotifyByID = `-- name: GetGroupNotifyByID :many
select id, relation_id, msg_content,COALESCE(msg_expand, CAST('null' AS JSON)) AS msg_expand, account_id, create_at, read_ids
from group_notify
where relation_id = ?
`

type GetGroupNotifyByIDRow struct {
	ID         int64
	RelationID sql.NullInt64
	MsgContent string
	MsgExpand  json.RawMessage
	AccountID  sql.NullInt64
	CreateAt   time.Time
	ReadIds    json.RawMessage
}

func (q *Queries) GetGroupNotifyByID(ctx context.Context, relationID sql.NullInt64) ([]*GetGroupNotifyByIDRow, error) {
	rows, err := q.query(ctx, q.getGroupNotifyByIDStmt, getGroupNotifyByID, relationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetGroupNotifyByIDRow{}
	for rows.Next() {
		var i GetGroupNotifyByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.RelationID,
			&i.MsgContent,
			&i.MsgExpand,
			&i.AccountID,
			&i.CreateAt,
			&i.ReadIds,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupNotify = `-- name: UpdateGroupNotify :exec
update group_notify
set relation_id=?,
    msg_content=?,
    msg_expand=?,
    account_id=?,
    create_at=?,
    read_ids=?
where id=?
`

type UpdateGroupNotifyParams struct {
	RelationID sql.NullInt64
	MsgContent string
	MsgExpand  json.RawMessage
	AccountID  sql.NullInt64
	CreateAt   time.Time
	ReadIds    json.RawMessage
	ID         int64
}

func (q *Queries) UpdateGroupNotify(ctx context.Context, arg *UpdateGroupNotifyParams) error {
	_, err := q.exec(ctx, q.updateGroupNotifyStmt, updateGroupNotify,
		arg.RelationID,
		arg.MsgContent,
		arg.MsgExpand,
		arg.AccountID,
		arg.CreateAt,
		arg.ReadIds,
		arg.ID,
	)
	return err
}

const updateGroupNotifyReturn = `-- name: UpdateGroupNotifyReturn :one
select id, relation_id, msg_content, msg_expand, account_id, create_at, read_ids, msg_content_tsv
from group_notify
where id=?
`

func (q *Queries) UpdateGroupNotifyReturn(ctx context.Context, id int64) (*GroupNotify, error) {
	row := q.queryRow(ctx, q.updateGroupNotifyReturnStmt, updateGroupNotifyReturn, id)
	var i GroupNotify
	err := row.Scan(
		&i.ID,
		&i.RelationID,
		&i.MsgContent,
		&i.MsgExpand,
		&i.AccountID,
		&i.CreateAt,
		&i.ReadIds,
		&i.MsgContentTsv,
	)
	return &i, err
}
