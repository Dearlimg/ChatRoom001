// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: relation.sql

package db

import (
	"context"
	"database/sql"
)

const createFriendRelation = `-- name: CreateFriendRelation :exec
insert into relations(relation_type,account1_id,account2_id)
value ('friend',?,?)
`

type CreateFriendRelationParams struct {
	Account1ID sql.NullInt64 `json:"account1_id"`
	Account2ID sql.NullInt64 `json:"account2_id"`
}

func (q *Queries) CreateFriendRelation(ctx context.Context, arg *CreateFriendRelationParams) error {
	_, err := q.exec(ctx, q.createFriendRelationStmt, createFriendRelation, arg.Account1ID, arg.Account2ID)
	return err
}

const createGroupRelation = `-- name: CreateGroupRelation :exec
INSERT INTO relations (relation_type, group_name, group_description, group_avatar)
value ('group',?,?,?)
`

type CreateGroupRelationParams struct {
	GroupName        sql.NullString `json:"group_name"`
	GroupDescription sql.NullString `json:"group_description"`
	GroupAvatar      sql.NullString `json:"group_avatar"`
}

func (q *Queries) CreateGroupRelation(ctx context.Context, arg *CreateGroupRelationParams) error {
	_, err := q.exec(ctx, q.createGroupRelationStmt, createGroupRelation, arg.GroupName, arg.GroupDescription, arg.GroupAvatar)
	return err
}

const deleteFriendRelation = `-- name: DeleteFriendRelation :exec
insert into relations(relation_type,account1_id,account2_id)
value ('friend',?,?)
`

type DeleteFriendRelationParams struct {
	Account1ID sql.NullInt64 `json:"account1_id"`
	Account2ID sql.NullInt64 `json:"account2_id"`
}

func (q *Queries) DeleteFriendRelation(ctx context.Context, arg *DeleteFriendRelationParams) error {
	_, err := q.exec(ctx, q.deleteFriendRelationStmt, deleteFriendRelation, arg.Account1ID, arg.Account2ID)
	return err
}

const deleteFriendRelationByAccountID = `-- name: DeleteFriendRelationByAccountID :exec
delete
from relations
where relation_type ='friend'
and (account1_id=?)
`

func (q *Queries) DeleteFriendRelationByAccountID(ctx context.Context, account1ID sql.NullInt64) error {
	_, err := q.exec(ctx, q.deleteFriendRelationByAccountIDStmt, deleteFriendRelationByAccountID, account1ID)
	return err
}

const deleteRelation = `-- name: DeleteRelation :exec
delete
from relations
where id=?
`

func (q *Queries) DeleteRelation(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteRelationStmt, deleteRelation, id)
	return err
}

const existsFriendRelation = `-- name: ExistsFriendRelation :one
select exists(select 1
              from relations
              where relation_type = 'friend'
              and account1_id =?
              and account2_id=?)
`

type ExistsFriendRelationParams struct {
	Account1ID sql.NullInt64 `json:"account1_id"`
	Account2ID sql.NullInt64 `json:"account2_id"`
}

func (q *Queries) ExistsFriendRelation(ctx context.Context, arg *ExistsFriendRelationParams) (bool, error) {
	row := q.queryRow(ctx, q.existsFriendRelationStmt, existsFriendRelation, arg.Account1ID, arg.Account2ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllGroupRelation = `-- name: GetAllGroupRelation :many
select id
from relations
where relation_type = 'group'
and account1_id is null
and account2_id is null
`

func (q *Queries) GetAllGroupRelation(ctx context.Context) ([]int64, error) {
	rows, err := q.query(ctx, q.getAllGroupRelationStmt, getAllGroupRelation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRelationIDs = `-- name: GetAllRelationIDs :many
select id
from relations
`

func (q *Queries) GetAllRelationIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.query(ctx, q.getAllRelationIDsStmt, getAllRelationIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRelationOnRelation = `-- name: GetAllRelationOnRelation :many
select id, relation_type, group_name, group_description, group_avatar, account1_id, account2_id, created_at
from relations
`

func (q *Queries) GetAllRelationOnRelation(ctx context.Context) ([]*Relation, error) {
	rows, err := q.query(ctx, q.getAllRelationOnRelationStmt, getAllRelationOnRelation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Relation
	for rows.Next() {
		var i Relation
		if err := rows.Scan(
			&i.ID,
			&i.RelationType,
			&i.GroupName,
			&i.GroupDescription,
			&i.GroupAvatar,
			&i.Account1ID,
			&i.Account2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendRelationByID = `-- name: GetFriendRelationByID :one
select (relations.account2_id,relations.account1_id,relations.created_at)
from relations
where relation_type='friend'
  and id =?
`

func (q *Queries) GetFriendRelationByID(ctx context.Context, id int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getFriendRelationByIDStmt, getFriendRelationByID, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getGroupRelationByID = `-- name: GetGroupRelationByID :one
select id,relation_type,relations.group_name,relations.group_description,relations.group_avatar
from relations
where relation_type = 'group' and id = ?
`

type GetGroupRelationByIDRow struct {
	ID               int64                 `json:"id"`
	RelationType     RelationsRelationType `json:"relation_type"`
	GroupName        sql.NullString        `json:"group_name"`
	GroupDescription sql.NullString        `json:"group_description"`
	GroupAvatar      sql.NullString        `json:"group_avatar"`
}

func (q *Queries) GetGroupRelationByID(ctx context.Context, id int64) (*GetGroupRelationByIDRow, error) {
	row := q.queryRow(ctx, q.getGroupRelationByIDStmt, getGroupRelationByID, id)
	var i GetGroupRelationByIDRow
	err := row.Scan(
		&i.ID,
		&i.RelationType,
		&i.GroupName,
		&i.GroupDescription,
		&i.GroupAvatar,
	)
	return &i, err
}

const getRelationIDByAccountID = `-- name: GetRelationIDByAccountID :one
select id
from relations
where account2_id=?
and account1_id=?
`

type GetRelationIDByAccountIDParams struct {
	Account2ID sql.NullInt64 `json:"account2_id"`
	Account1ID sql.NullInt64 `json:"account1_id"`
}

func (q *Queries) GetRelationIDByAccountID(ctx context.Context, arg *GetRelationIDByAccountIDParams) (int64, error) {
	row := q.queryRow(ctx, q.getRelationIDByAccountIDStmt, getRelationIDByAccountID, arg.Account2ID, arg.Account1ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRelationIDByInfo = `-- name: GetRelationIDByInfo :one
select id
from relations
where relation_type='friend'
and account1_id=?
and account2_id=?
`

type GetRelationIDByInfoParams struct {
	Account1ID sql.NullInt64 `json:"account1_id"`
	Account2ID sql.NullInt64 `json:"account2_id"`
}

func (q *Queries) GetRelationIDByInfo(ctx context.Context, arg *GetRelationIDByInfoParams) (int64, error) {
	row := q.queryRow(ctx, q.getRelationIDByInfoStmt, getRelationIDByInfo, arg.Account1ID, arg.Account2ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateGroupRelation = `-- name: UpdateGroupRelation :exec
UPDATE relations
SET group_name = ?, group_description = ?, group_avatar = ?
WHERE relation_type = 'group'
AND id = ?
`

type UpdateGroupRelationParams struct {
	GroupName        sql.NullString `json:"group_name"`
	GroupDescription sql.NullString `json:"group_description"`
	GroupAvatar      sql.NullString `json:"group_avatar"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdateGroupRelation(ctx context.Context, arg *UpdateGroupRelationParams) error {
	_, err := q.exec(ctx, q.updateGroupRelationStmt, updateGroupRelation,
		arg.GroupName,
		arg.GroupDescription,
		arg.GroupAvatar,
		arg.ID,
	)
	return err
}
