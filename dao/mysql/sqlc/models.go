// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type AccountsGender string

const (
	AccountsGenderValue0 AccountsGender = "男"
	AccountsGenderValue1 AccountsGender = "女"
	AccountsGenderValue2 AccountsGender = "未知"
)

func (e *AccountsGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountsGender(s)
	case string:
		*e = AccountsGender(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountsGender: %T", src)
	}
	return nil
}

type NullAccountsGender struct {
	AccountsGender AccountsGender
	Valid          bool // Valid is true if AccountsGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountsGender) Scan(value interface{}) error {
	if value == nil {
		ns.AccountsGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountsGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountsGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountsGender), nil
}

type ApplicationsStatus string

const (
	ApplicationsStatusValue0 ApplicationsStatus = "已申请"
	ApplicationsStatusValue1 ApplicationsStatus = "已同意"
	ApplicationsStatusValue2 ApplicationsStatus = "已拒绝"
)

func (e *ApplicationsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationsStatus(s)
	case string:
		*e = ApplicationsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationsStatus: %T", src)
	}
	return nil
}

type NullApplicationsStatus struct {
	ApplicationsStatus ApplicationsStatus
	Valid              bool // Valid is true if ApplicationsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationsStatus), nil
}

type FilesFileType string

const (
	FilesFileTypeImg  FilesFileType = "img"
	FilesFileTypeFile FilesFileType = "file"
)

func (e *FilesFileType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FilesFileType(s)
	case string:
		*e = FilesFileType(s)
	default:
		return fmt.Errorf("unsupported scan type for FilesFileType: %T", src)
	}
	return nil
}

type NullFilesFileType struct {
	FilesFileType FilesFileType
	Valid         bool // Valid is true if FilesFileType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilesFileType) Scan(value interface{}) error {
	if value == nil {
		ns.FilesFileType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FilesFileType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilesFileType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FilesFileType), nil
}

type MessagesMsgType string

const (
	MessagesMsgTypeText MessagesMsgType = "text"
	MessagesMsgTypeFile MessagesMsgType = "file"
)

func (e *MessagesMsgType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessagesMsgType(s)
	case string:
		*e = MessagesMsgType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessagesMsgType: %T", src)
	}
	return nil
}

type NullMessagesMsgType struct {
	MessagesMsgType MessagesMsgType
	Valid           bool // Valid is true if MessagesMsgType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessagesMsgType) Scan(value interface{}) error {
	if value == nil {
		ns.MessagesMsgType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessagesMsgType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessagesMsgType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessagesMsgType), nil
}

type MessagesNotifyType string

const (
	MessagesNotifyTypeSystem MessagesNotifyType = "system"
	MessagesNotifyTypeCommon MessagesNotifyType = "common"
)

func (e *MessagesNotifyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessagesNotifyType(s)
	case string:
		*e = MessagesNotifyType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessagesNotifyType: %T", src)
	}
	return nil
}

type NullMessagesNotifyType struct {
	MessagesNotifyType MessagesNotifyType
	Valid              bool // Valid is true if MessagesNotifyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessagesNotifyType) Scan(value interface{}) error {
	if value == nil {
		ns.MessagesNotifyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessagesNotifyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessagesNotifyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessagesNotifyType), nil
}

type MsgNotificationsMsgType string

const (
	MsgNotificationsMsgTypeSystem MsgNotificationsMsgType = "system"
	MsgNotificationsMsgTypeCommon MsgNotificationsMsgType = "common"
)

func (e *MsgNotificationsMsgType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MsgNotificationsMsgType(s)
	case string:
		*e = MsgNotificationsMsgType(s)
	default:
		return fmt.Errorf("unsupported scan type for MsgNotificationsMsgType: %T", src)
	}
	return nil
}

type NullMsgNotificationsMsgType struct {
	MsgNotificationsMsgType MsgNotificationsMsgType
	Valid                   bool // Valid is true if MsgNotificationsMsgType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMsgNotificationsMsgType) Scan(value interface{}) error {
	if value == nil {
		ns.MsgNotificationsMsgType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MsgNotificationsMsgType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMsgNotificationsMsgType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MsgNotificationsMsgType), nil
}

type RelationsRelationType string

const (
	RelationsRelationTypeGroup  RelationsRelationType = "group"
	RelationsRelationTypeFriend RelationsRelationType = "friend"
)

func (e *RelationsRelationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelationsRelationType(s)
	case string:
		*e = RelationsRelationType(s)
	default:
		return fmt.Errorf("unsupported scan type for RelationsRelationType: %T", src)
	}
	return nil
}

type NullRelationsRelationType struct {
	RelationsRelationType RelationsRelationType
	Valid                 bool // Valid is true if RelationsRelationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationsRelationType) Scan(value interface{}) error {
	if value == nil {
		ns.RelationsRelationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelationsRelationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationsRelationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelationsRelationType), nil
}

type RelationshipsRelationType string

const (
	RelationshipsRelationTypeGroup  RelationshipsRelationType = "group"
	RelationshipsRelationTypeFriend RelationshipsRelationType = "friend"
)

func (e *RelationshipsRelationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelationshipsRelationType(s)
	case string:
		*e = RelationshipsRelationType(s)
	default:
		return fmt.Errorf("unsupported scan type for RelationshipsRelationType: %T", src)
	}
	return nil
}

type NullRelationshipsRelationType struct {
	RelationshipsRelationType RelationshipsRelationType
	Valid                     bool // Valid is true if RelationshipsRelationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationshipsRelationType) Scan(value interface{}) error {
	if value == nil {
		ns.RelationshipsRelationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelationshipsRelationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationshipsRelationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelationshipsRelationType), nil
}

type UsersGender string

const (
	UsersGenderValue0 UsersGender = "男"
	UsersGenderValue1 UsersGender = "女"
	UsersGenderValue2 UsersGender = "未知"
)

func (e *UsersGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersGender(s)
	case string:
		*e = UsersGender(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersGender: %T", src)
	}
	return nil
}

type NullUsersGender struct {
	UsersGender UsersGender
	Valid       bool // Valid is true if UsersGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersGender) Scan(value interface{}) error {
	if value == nil {
		ns.UsersGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersGender), nil
}

type Account struct {
	ID        int64
	UserID    int64
	Name      string
	Avatar    string
	Gender    AccountsGender
	Signature string
	CreateAt  time.Time
}

type Application struct {
	ID       int64
	Status   ApplicationsStatus
	CreateAt time.Time
}

type File struct {
	ID       int64
	FileType FilesFileType
	FilePath string
	CreateAt time.Time
}

type Group struct {
	ID          int32
	Name        string
	Description sql.NullString
	Avatar      sql.NullString
}

type GroupNotify struct {
	ID            int64
	RelationID    sql.NullInt64
	MsgContent    string
	MsgExpand     json.RawMessage
	AccountID     sql.NullInt64
	CreateAt      time.Time
	ReadIds       json.RawMessage
	MsgContentTsv sql.NullString
}

type Message struct {
	ID            int64
	NotifyType    MessagesNotifyType
	MsgType       MessagesMsgType
	MsgContent    string
	MsgExtend     json.RawMessage
	FileID        sql.NullInt64
	AccountID     sql.NullInt64
	RlyMsgID      sql.NullInt64
	RelationID    int64
	CreateAt      time.Time
	IsRevoke      bool
	IsTop         bool
	IsPin         bool
	PinTime       time.Time
	ReadIds       json.RawMessage
	MsgContentTsy sql.NullString
}

type MsgNotification struct {
	ID       int64
	MsgType  MsgNotificationsMsgType
	Content  string
	CreateAt time.Time
}

type Relation struct {
	ID               int64
	RelationType     RelationsRelationType
	GroupName        sql.NullString
	GroupDescription sql.NullString
	Account1ID       sql.NullInt64
	Account2ID       sql.NullInt64
	CreateAt         time.Time
}

type Relationship struct {
	ID           int32
	RelationType RelationshipsRelationType
}

type Setting struct {
	AccountID    int64
	RelationID   int64
	NickName     string
	IsNotDisturb bool
	IsPin        bool
	PinTime      time.Time
	IsShow       bool
	LastShow     time.Time
	IsLeader     bool
	IsSelf       bool
}

type User struct {
	ID     int32
	Gender UsersGender
}
